name: Deploy to Azure

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1  # Shallow clone for faster checkout
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Setup GitHub Actions Cache
        uses: actions/cache@v3
        with:
          path: |
            .next/cache
            node_modules/.cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-
      
      - name: Install dependencies
        run: npm ci --no-audit --prefer-offline
      
      - name: Generate Prisma Client
        run: npx prisma generate
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
      
      - name: Build application
        run: npm run build
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          SHADOW_DATABASE_URL: ${{ secrets.SHADOW_DATABASE_URL }}
          NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL }}
          NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
          NODE_ENV: production
      
      - name: Prepare standalone output
        run: |
          # Ensure the standalone output directories exist
          if [ -d ".next/standalone" ]; then
            echo "Standalone output exists, preparing for deployment"
            mkdir -p .next/standalone/.next
            cp -r .next/static .next/standalone/.next/
            cp -r public .next/standalone/
            
            # Create a server.js file in the root for Azure compatibility
            echo "Creating server.js file for Azure..."
            cp .next/standalone/server.js .next/standalone/app.js
            
            # Create a web.config file to ensure Azure uses the correct startup command
            echo "Creating web.config file for Azure..."
            cat > .next/standalone/web.config << 'EOL'
<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <system.webServer>
    <webSocket enabled="false" />
    <handlers>
      <add name="iisnode" path="app.js" verb="*" modules="iisnode" />
    </handlers>
    <rewrite>
      <rules>
        <rule name="app">
          <match url="/*" />
          <action type="Rewrite" url="app.js" />
        </rule>
      </rules>
    </rewrite>
    <iisnode node_env="production" nodeProcessCommandLine="node --max-http-header-size=16384" />
  </system.webServer>
</configuration>
EOL
            echo "Setup complete for Azure deployment"
          else
            echo "Standalone output not found, falling back to regular package"
            echo "Using current directory as deployment package"
            
            # For non-standalone, create a server.js that wraps next start
            echo "Creating server.js file for Azure compatibility..."
            cat > server.js << 'EOL'
// server.js
const { exec } = require('child_process');
const server = exec('npx next start');

server.stdout.on('data', (data) => {
  console.log(data);
});

server.stderr.on('data', (data) => {
  console.error(data);
});
EOL
          fi
      
      - name: Optimize package for deployment
        run: |
          # Remove unnecessary files to reduce package size
          rm -rf .git .github node_modules/.cache
          # Only include production dependencies
          npm prune --production
      
      - name: Select deployment package
        id: select-package
        run: |
          if [ -d ".next/standalone" ]; then
            echo "Using standalone output for deployment"
            echo "deployment_package=.next/standalone" >> $GITHUB_OUTPUT
          else
            echo "Using current directory for deployment"
            echo "deployment_package=." >> $GITHUB_OUTPUT
          fi
      
      - name: Deploy to Azure Web App
        id: deploy-to-azure
        uses: azure/webapps-deploy@v2
        with:
          app-name: 'real-estate-crm-app'
          publish-profile: ${{ secrets.AZURE_PUBLISH_PROFILE }}
          package: ${{ steps.select-package.outputs.deployment_package }}
          clean: true  # Clean deploy target before deploying
      
      - name: Deployment Status
        run: |
          if [ "${{ steps.deploy-to-azure.outcome }}" == "success" ]; then
            echo "✅ Deployment completed successfully!"
          else
            echo "❌ Deployment failed!"
            exit 1
          fi
