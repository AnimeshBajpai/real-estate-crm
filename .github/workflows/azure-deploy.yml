name: Deploy to Azure

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci --no-audit --prefer-offline
      
      - name: Generate Prisma Client
        run: npx prisma generate
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
      
      - name: Build application
        run: npm run build
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          SHADOW_DATABASE_URL: ${{ secrets.SHADOW_DATABASE_URL }}
          NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL }}
          NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
          NODE_ENV: production
      
      - name: Prepare deployment files
        run: |
          if [ -d ".next/standalone" ]; then
            echo "Using standalone output"
            mkdir -p .next/standalone/.next
            cp -r .next/static .next/standalone/.next/
            cp -r public .next/standalone/
            
            echo "Creating app.js from server.js"
            cp .next/standalone/server.js .next/standalone/app.js
            
            echo "Creating web.config file"
            echo '<?xml version="1.0" encoding="utf-8"?>' > .next/standalone/web.config
            echo '<configuration>' >> .next/standalone/web.config
            echo '  <system.webServer>' >> .next/standalone/web.config
            echo '    <webSocket enabled="false" />' >> .next/standalone/web.config
            echo '    <handlers>' >> .next/standalone/web.config
            echo '      <add name="iisnode" path="app.js" verb="*" modules="iisnode" />' >> .next/standalone/web.config
            echo '    </handlers>' >> .next/standalone/web.config
            echo '    <rewrite>' >> .next/standalone/web.config
            echo '      <rules>' >> .next/standalone/web.config
            echo '        <rule name="app">' >> .next/standalone/web.config
            echo '          <match url="/*" />' >> .next/standalone/web.config
            echo '          <action type="Rewrite" url="app.js" />' >> .next/standalone/web.config
            echo '        </rule>' >> .next/standalone/web.config
            echo '      </rules>' >> .next/standalone/web.config
            echo '    </rewrite>' >> .next/standalone/web.config
            echo '    <iisnode node_env="production" nodeProcessCommandLine="node --max-http-header-size=16384" />' >> .next/standalone/web.config
            # Add environment variables section for PORT=3001
            echo '    <appSettings>' >> .next/standalone/web.config
            echo '      <add key="PORT" value="3001" />' >> .next/standalone/web.config
            echo '    </appSettings>' >> .next/standalone/web.config
            echo '  </system.webServer>' >> .next/standalone/web.config
            echo '</configuration>' >> .next/standalone/web.config
            
            echo "deployment_package=.next/standalone" >> $GITHUB_OUTPUT          else
            echo "Using regular package"
            echo "Creating server.js wrapper"
            echo '// server.js' > server.js
            echo 'const { exec } = require("child_process");' >> server.js
            echo 'const server = exec("npx next start -p 3001");' >> server.js
            echo 'server.stdout.on("data", (data) => { console.log(data); });' >> server.js
            echo 'server.stderr.on("data", (data) => { console.error(data); });' >> server.js
            
            echo "deployment_package=." >> $GITHUB_OUTPUT
          fi
        id: prepare-files
      
      - name: Optimize package
        run: |
          rm -rf .git .github node_modules/.cache
          npm prune --production
      
      - name: Deploy to Azure Web App
        id: deploy-to-azure
        uses: azure/webapps-deploy@v2
        with:
          app-name: 'real-estate-crm-app'
          publish-profile: ${{ secrets.AZURE_PUBLISH_PROFILE }}
          package: ${{ steps.prepare-files.outputs.deployment_package }}
          clean: true
      
      - name: Deployment Status
        run: |
          if [ "${{ steps.deploy-to-azure.outcome }}" == "success" ]; then
            echo "✅ Deployment completed successfully!"
          else
            echo "❌ Deployment failed!"
            exit 1
          fi
